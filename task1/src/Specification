SAR Task 1

Specification 
Que fait chaque objet, quelles sont ses méthodes, comment intéragisse-t-elle avec les autres objet/méthodes

Tentative 1 :
Programme en Java qui permet de faire communiquer plusieurs tâches s'exécutant parallèllement.
Chaque tâche est un thread composé d'un Broker et d'un Runnable (Executable ?).
Le Broker est l'interface permettant les échanges entre les tâches. Il crée des channels pour communiquer avec les autres Broker. Un Broker envoi une demande de connection sur un numéro de port à un second broker. Ce dernier accepte la connection, créant ainsi un Channel entre les deux.  

Class Broker : Objet 
	Broker(String name) : Initialise un Broker en lui donnant un nom name
	Channel accept(int port) : Accepte une demande de connection reçu sur le port port
	Channel connect(String name, int port) : Envoi une demande de connection au Broker name sur le port numéro port
	


Class Channel :
	int read(byte[] bytes, int offset, int length) : Méthode permettant de lire une séquence de bit sur le Channel. 
	int write(byte[] bytes, int offset, int length) : Méthode permettant d'écrire une séquence de bit sur le Channel. 
	void disconnect() : Déconnecte le channel des deux broker qu'il relit
	boolean disconnected() : Vérifier si le Channel est déconnecter ou non


Class Task
	Task(Broker b, Runnable r) : initialise la Task, en lui donnant un Broker au préalable initialisé et 
	static Broker getBroker() :


Correction 1 :
Cadre pour faire des canaux de communications entre deux tache
Les taches utilisent des canaux pour envoyer des flux d'octets,
Comment obtenir un canal ? -> broker = fabrique de canal
Comment établir le canal de communication (port, nom, nombre de broker...)
	Même numéro de port sur deux broker différents ne sont pas les même ports
Combien de tâche sur combien de broker ? une tache a au moins un broker, pas de limite sur le nombre. plusieurs tâches peuvent se partager un broker
Broker ont un nom unique, 
Canaux FIFO lostless ? Ou autre chose ?
Flux bidirectionnel ou unidirectionnel dans les canaux ? Bidirectionnel
Mutli ou mono threadé ? faire du multi implique que l'écriture peut être découpé en plusieurs parties, et donc entrecoupé de message différent puisqu'il peut y avoir plusieurs task sur un canal. C'est préférable de faire du mono
int read (buff[], off, len) -> buff[] tableau que l'on veut lire, off numéro du bit à partir duquel on doit lire, len nombre de bit que l'on doit lire, l'int en retour est le nombre de bit lu
Read est bloquant s'il n'y a rien à lire, Write est bloquant s'il n'y a rien à écrire
Gestion des codes retours des méthodes


Pour semaine pro :
Finir la spec, echanger avec les autres pour améliorer la spec



